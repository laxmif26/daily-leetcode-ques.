class Solution {
public:
    int numSteps(string s) {
        // Initialize the number of steps to 0
        int steps = 0;
        // The carry variable to handle the addition carry over
        bool carry = false;

        // Traverse the binary string from the least significant bit to the most
        // Ignoring the most significant bit as we stop when we reach the beginning of the string
        for (int i = s.size() - 1; i > 0; --i) {
            // Get the current bit
            char bit = s[i];

            // If there's a carry from the previous operation
            if (carry) {
                // Flip the current bit due to the carry
                if (bit == '0') {
                    bit = '1';
                    // The carry has been used, reset it to false
                    carry = false;
                } else // If the bit is '1', turning into '0' keeps carry true
                    bit = '0';
            }

            // If the bit is '1', we will need a step to make it '0' and create a carry
            if (bit == '1') {
                // Increment steps for the flip to '0'
                ++steps;
                // Set the carry for the next iteration
                carry = true;
            }
            // Regardless of the bit, we do a right shift operation
            ++steps;
        }

        // If there's a carry at the end, we need to add one more step to add it to the MSB
        if (carry) ++steps;

        // Return the total number of steps
        return steps;
    }
};
